const { execSync } = require("child_process");
const { OpenAI } = require("openai");
const ora = require("ora").default;
const path = require("path");
const fs = require("fs");

require("dotenv").config();

// üîë –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –∫–ª—é—á
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "",
});

// ‚¨áÔ∏è –•–∞—Ä–¥–∫–æ–¥ —Å–ø–∏—Å–∫—É –ø—Ä–æ—î–∫—Ç—ñ–≤
const AUTHOR = "prostoandrei9@gmail.com";
const projects = [
  {
    name: "Sky Market",
    path: "/Applications/MAMP/htdocs",
  },
  {
    name: "Skyservice Dashboard",
    path: "/Users/vlad/Documents/projects/skyservice-dashboard-vue",
  }
];

// ‚¨áÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç–∏
const SINCE = process.argv[2] || "yesterday";

if (!AUTHOR) {
  console.error('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node multi-daily-report.js "–ê–≤—Ç–æ—Ä" ["–ü–µ—Ä—ñ–æ–¥"]');
  process.exit(1);
}

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
(async () => {
  let allCommits = [];

  for (const project of projects) {
    const fullPath = project.path;

    if (!fs.existsSync(fullPath)) {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${project.name} ‚Äî —à–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î`);
      continue;
    }

    try {
      const output = execSync(
        `git log --since="${SINCE}" --author="${AUTHOR}" --pretty=format:"%s"`,
        {
          cwd: fullPath,
          encoding: "utf-8",
        }
      ).trim();

      if (output) {
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ–º—ñ—Ç–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å merge/Merge/merging
        const commits = output
          .split("\n")
          .filter(c => !/merge|merging/i.test(c));
        if (commits.length > 0) {
          allCommits.push({ name: project.name, commits });
        }
      }
    } catch (err) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ ${project.name}: ${err.message}`);
    }
  }

  if (allCommits.length === 0) {
    console.log("‚ùóÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ–º—ñ—Ç—É –¥–ª—è –∑–≤—ñ—Ç—É.");
    return;
  }

  // –î–æ–¥–∞—é –≤–∏–≤—ñ–¥ –∫–æ–º—ñ—Ç—ñ–≤ –ø–æ –ø—Ä–æ—î–∫—Ç–∞—Ö
  console.log("\n–ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–º—ñ—Ç–∏ –ø–æ –ø—Ä–æ—î–∫—Ç–∞—Ö:");
  allCommits.forEach(project => {
    console.log(`\nüìÅ ${project.name}:`);
    project.commits.forEach(commit => {
      console.log(`- ${commit}`);
    });
  });

  const spinner = ora("–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç...").start();

  const combinedCommitsText = allCommits
    .map(
      (project) =>
        `üìÅ ${project.name}:\n${project.commits
          .map((c) => `- ${c}`)
          .join("\n")}`
    )
    .join("\n\n");

    const prompt = `
    –ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É git-–∫–æ–º—ñ—Ç—ñ–≤ –∑–≥–µ–Ω–µ—Ä—É–π —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É —Å—Ç–∏—Å–ª–æ–º—É –≤–∏–≥–ª—è–¥—ñ. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É –≤–∏–≤–µ–¥–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

    ProjectName: –∫–æ—Ä–æ—Ç–∫–æ, —á–µ—Ä–µ–∑ –∫–æ–º—É, —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ.

    –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä—ñ–≤ —ñ –∑–∞–π–≤–∏—Ö –≤—Å—Ç—É–ø—ñ–≤ —Ç–∏–ø—É "–≤—á–æ—Ä–∞ —è –ø—Ä–∞—Ü—é–≤–∞–≤ –Ω–∞–¥...". –ü—Ä–æ—Å—Ç–æ –ø–æ —Å—É—Ç—ñ. –í–∫–∞–∑—É–π –ª–∏—à–µ –Ω–∞–π–∑–Ω–∞—á–Ω—ñ—à—ñ –∑–º—ñ–Ω–∏

    –û—Å—å –∫–æ–º—ñ—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É:

    ${combinedCommitsText}
    `;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
    });

    spinner.succeed("–ì–æ—Ç–æ–≤–æ!");

    console.log("\nüìÑ –ó–≤—ñ—Ç:");
    console.log(response.choices[0].message.content);
  } catch (err) {
    spinner.fail("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI");
    console.error("‚ùå", err.message);
  }
})();
